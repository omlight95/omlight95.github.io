<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang map实现原理浅析</title>
    <url>/2022/09/06/Go/Golang%20map%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="map的内存模型"><a href="#map的内存模型" class="headerlink" title="map的内存模型"></a>map的内存模型</h2><p>我的go源码版本是：<a href="https://golang.org/dl/go1.17.2.src.tar.gz">go1.17.2</a></p>
<p>map的源码在<code>Go_SDK\go1.17.2\src\runtime\map.go</code>中。</p>
<p>首先我们来看一下map最重要的两个结构：</p>
<p><strong>hmap:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// A header <span class="keyword">for</span> a Go map.</span><br><span class="line"><span class="built_in">type</span> hmap struct &#123;</span><br><span class="line">	// Note: the format of the hmap is also encoded <span class="keyword">in</span> cmd/compile/internal/reflectdata/reflect.go.</span><br><span class="line">	// Make sure this stays <span class="keyword">in</span> <span class="built_in">sync</span> with the compiler<span class="string">&#x27;s definition.</span></span><br><span class="line"><span class="string">	count     int // # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class="line"><span class="string">	flags     uint8</span></span><br><span class="line"><span class="string">	B         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class="line"><span class="string">	noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class="line"><span class="string">	hash0     uint32 // hash seed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	buckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.</span></span><br><span class="line"><span class="string">	oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing</span></span><br><span class="line"><span class="string">	nevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	extra *mapextra // optional fields</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>


<p><strong>bmap:（bucket桶）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// A bucket <span class="keyword">for</span> a Go map.</span><br><span class="line"><span class="built_in">type</span> bmap struct &#123;</span><br><span class="line">	// tophash generally contains the top byte of the <span class="built_in">hash</span> value</span><br><span class="line">	// <span class="keyword">for</span> each key <span class="keyword">in</span> this bucket. If tophash[0] &lt; minTopHash,</span><br><span class="line">	// tophash[0] is a bucket evacuation state instead.</span><br><span class="line">	tophash [bucketCnt]uint8</span><br><span class="line">	// Followed by bucketCnt keys and <span class="keyword">then</span> bucketCnt elems.</span><br><span class="line">	// NOTE: packing all the keys together and <span class="keyword">then</span> all the elems together makes the</span><br><span class="line">	// code a bit more complicated than alternating key/elem/key/elem/... but it allows</span><br><span class="line">	// us to eliminate padding <span class="built_in">which</span> would be needed <span class="keyword">for</span>, e.g., map[int64]int8.</span><br><span class="line">	// Followed by an overflow pointer.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上在golang runtime时，编译器会动态为bmap创建一个新结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> bmap struct &#123;</span><br><span class="line">    topbits  [8]uint8</span><br><span class="line">    keys     [8]keytype</span><br><span class="line">    values   [8]valuetype</span><br><span class="line">    pad      uintptr</span><br><span class="line">    overflow uintptr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Golang中map的底层实现是一个哈希表，因此实现map的过程实际上就是实现哈希表的过程。在这个哈希表中，主要出现的结构体有两个，一个叫<code>hmap(a header for a go map)</code>，一个叫<code>bmap(a bucket for a Go map</code>，通常叫其<code>bucket</code>)。这两种结构的样子分别如下所示：</p>
<p><strong>hmap:</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dae7f42e29445f38102322471ce8f18~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>图中有很多字段，但是便于理解<code>map</code>的架构，你只需要关心的只有一个，就是标红的字段：<code>buckets</code>数组。Golang的map中用于存储的结构是bucket数组。</p>
<p><strong>bucket:</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b41426247e24d92863235a9b189dc34~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>标红的字段依然是“核心”，map中的key和value就存储在这里。“高位哈希值”数组记录的是当前bucket中key相关的“索引”，稍后会详细叙述。还有一个字段是一个指向扩容后的bucket的指针，使得bucket会形成一个链表结构。例如下图：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aaa758ba438149bf93f6353214613012~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>由此看出<code>hmap</code>和<code>bucket</code>的关系是这样的：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27c09461ea0c467aa972b8702761d69a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>而bucket又是一个链表，所以整体的结构应该是这样的：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8af26bf1d7d45209276a6b9fac1c9d4~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>哈希表的特点是会有一个哈希函数，对传进来的key进行哈希运算，得到唯一的值，一般情况下都是一个数值。Golang的<code>map</code>中也有这么一个哈希函数，也会算出唯一的值，对于这个值的使用：</p>
<p>Golang把求得的值按照用途一分为二：高位和低位。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e8ac896e43647d1a2e931c3a26d07e1~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>如图所示，蓝色为高位，红色为低位。 然后低位用于寻找当前key属于<code>hmap</code>中的哪个bucket，而高位用于寻找bucket中的哪个key。上文中提到：bucket中有个属性字段是“高位哈希值”数组，这里存的就是蓝色的高位值，用来声明当前bucket中有哪些“key”，便于搜索查找。 需要特别指出的一点是：我们<code>map</code>中的key&#x2F;value值都是存到同一个数组中的。数组中的顺序是这样的:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/959b15e23c0945c9b214b1cfbb582f1f~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>并不是key0&#x2F;value0&#x2F;key1&#x2F;value1的形式，这样做的好处是：在key和value的长度不同的时候，<strong>可以消除padding(内存对齐)带来的空间浪费。</strong></p>
<p>现在，我们可以得到Go语言<code>map</code>的整个的结构图了：(hash结果的低位用于选择把KV放在bmap数组中的哪一个bucket中，高位用于key的快速预览，用于快速试错)。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a29f6b88fb624e119a37a215a7bcd6f3~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<h2 id="map的扩容"><a href="#map的扩容" class="headerlink" title="map的扩容"></a>map的扩容</h2><h3 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h3><p>判断扩充的条件，就是哈希表中的<code>负载因子</code>(即loadFactor)。<br>每个哈希表的都会有一个负载因子，数值超过负载因子就会为哈希表扩容。<br>Golang的<code>map</code>的加载因子的公式是：<strong>map长度 &#x2F; 2^B</strong>(这是代表bmap数组的长度，B是取的低位的位数)<strong>阈值是6.5</strong>。其中B可以理解为已扩容的次数。</p>
<h3 id="渐进式扩容"><a href="#渐进式扩容" class="headerlink" title="渐进式扩容"></a>渐进式扩容</h3><p>需要扩容时就要分配更多的<code>桶（Bucket）</code>，它们就是新桶。需要把旧桶里储存的键值对都迁移到新桶里。如果哈希表存储的键值对较多，一次性迁移所有桶所花费的时间就比较显著。<br>所以通常会在哈希表扩容时，先分配足够多的新桶，然后用一个字段（<code>oldbuckets</code>）记录旧桶的位置。<br>再增加一个字段（<code>nevacuate</code>），记录旧桶迁移的进度。例如记录下一个要迁移的旧桶编号。<br>在哈希表每次进行读写操作时，如果检测到当前处于扩容阶段，就完成一部分键值对迁移任务，直到所有的旧桶迁移完成，旧桶不再使用，才算真正完成一次哈希表的扩容。<br>像这样把键值对迁移的时间分摊到多次哈希表操作中的方式，就是<strong>渐进式扩容</strong>，可以避免一次性扩容带来的性能瞬时抖动。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f95455cbfbd45adb7b028b8e3215bb9~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<h3 id="扩容规则"><a href="#扩容规则" class="headerlink" title="扩容规则"></a>扩容规则</h3><p>bmap结构体的最后一个字段是一个bmap型指针，指向一个溢出桶。溢出桶的内存布局与常规桶相同，是为了减少扩容次数而引入的。<br>当一个桶存满了，还有可用的溢出桶时，就会在后面链一个溢出桶，继续往这里面存。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c1efd19b562443896642191b7d6e7b1~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>实际上如果哈希表要分配的桶数目大于<code>2 ^ 4</code>，就认为要使用到溢出桶的几率较大，就会预分配<code>2 ^ (B - 4)</code>个溢出桶备用。<br>这些溢出桶与常规桶在内存中是连续的，只是前<code>2 ^ B</code>个用做常规桶，后面的用作溢出桶。</p>
<p>hmap结构体最后有一个<code>extra</code>字段，指向一个<code>mapextra</code>结构体。里面记录的都是溢出桶相关的信息。<code>nextoverflow</code>指向下一个空闲溢出桶。<br><code>overflow</code>是一个<code>slice</code>，记录目前已经被使用的溢出桶的地址。<code>noverflower</code>记录使用的溢出桶数量。<code>oldoverflower</code>用于在扩容阶段储存旧桶用到的那些溢出桶的地址。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b59dd8d9e824ef09b215c36f6dd9b5b~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<h4 id="翻倍扩容"><a href="#翻倍扩容" class="headerlink" title="翻倍扩容"></a>翻倍扩容</h4><p>当负载因子 <code>count / (2 ^ B) &gt; 6.5</code> ,就会发生翻倍扩容（<code>hmap.B++</code>），分配新桶的数量是旧桶的两倍。<br><code>buckets</code>指向新分配的两个桶，<code>oldbuckets</code>指向旧桶。<code>nevacuate</code>为0，表示接下来要迁移编号为0的旧桶。<br>每个旧桶的键值对都会分流到两个新桶中。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c83e831d26304a6bb4dd44b0ba4c942c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<h4 id="等量扩容"><a href="#等量扩容" class="headerlink" title="等量扩容"></a>等量扩容</h4><p>如果负载因子没有超标，但是使用的溢出桶较多，也会出发扩容，不过这一次是<code>等量扩容</code>。</p>
<p>那么用多少溢出桶算多了呢？</p>
<ul>
<li>如果常规桶的数目不大于 <code>2  ^ 15</code>  ,那么使用溢出桶的数目超过常规桶就算是多了。</li>
<li>如果常规桶的数目大于 <code>2 ^ 15</code> ，那么使用溢出桶的数目一旦超过 <code>2 ^ 15</code> ，就算是多了。</li>
</ul>
<p>所谓等量扩容，就是创建和旧桶数目一样多的新桶。然后把原来的键值对迁移到新桶中，但是既然是等量，那来回迁移的又有什么用呢？<br>什么情况下，桶的负载因子没有超过上限值，却偏偏使用了很多溢出桶呢？自然是有很多键值对被删除的情况。同样数目的键值对，迁移到新桶中，能够排列的更加紧凑，从而减少溢出桶的使用。这就是等量扩容的意义所在。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>Golang 逃逸分析</title>
    <url>/2022/09/06/Go/%E6%B5%85%E8%B0%88golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-栈和堆"><a href="#1-栈和堆" class="headerlink" title="1.栈和堆"></a>1.栈和堆</h2><p>在golang中，应用程序的内存载体，可以简单的分为栈和堆。<br>栈的内存是由编译器自动进行分配和释放，栈区往往存储着函数参数、局部变量和调用函数帧，它们随着函数的创建而分配，函数的退出而销毁。<br>与栈不同的是，应用程序在运行时只会存在一个堆。狭隘地说，内存管理只是针对堆内存而言的。程序在运行期间可以主动从堆上申请内存，这些内存通过Go的内存分配器分配，并由垃圾收集器回收。</p>
<p>那么一个问题就来了，<strong>我们怎么知道一个对象是应该放在堆内存还是栈内存之上的呢？</strong></p>
<p>其实golang的官网上已经给出了答案：</p>
<p><a href="https://golang.org/doc/faq#stack_or_heap">https://golang.org/doc/faq#stack_or_heap</a></p>
<p><img src="https://img-blog.csdnimg.cn/358747fa08c946f59de2fc16be230424.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARGF3bmxpZ2h0Xy1f,size_20,color_FFFFFF,t_70,g_se,x_16"><br>中文版：</p>
<p><img src="https://img-blog.csdnimg.cn/a272814aa9eb4a1e83e9935f7bd92bde.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARGF3bmxpZ2h0Xy1f,size_20,color_FFFFFF,t_70,g_se,x_16"><br>我们发现了一个名词：<strong>逃逸分析</strong>。</p>
<h2 id="2-逃逸分析"><a href="#2-逃逸分析" class="headerlink" title="2.逃逸分析"></a>2.逃逸分析</h2><p><strong>对于Golang程序，编译器是怎么判断一个变量到底是分配堆内存还是栈内存的呢？编译器决定内存分配位置的方式，就称之为逃逸分析(escape analysis)。逃逸分析由编译器完成，作用于编译阶段。</strong></p>
<p>官网中虽然没有明确说明逃逸分析规则，但是有以下几点准则，是可以参考的：</p>
<ul>
<li>逃逸分析是在编译器完成的，这是不同于jvm的运行时逃逸分析;</li>
<li>如果变量在函数外部没有引用，则优先放到栈中；</li>
<li>如果变量在函数外部存在引用，则必定放在堆中；</li>
</ul>
<h2 id="3-几种常见的逃逸情况："><a href="#3-几种常见的逃逸情况：" class="headerlink" title="3.几种常见的逃逸情况："></a>3.几种常见的逃逸情况：</h2><p>我们可通过<code>go build -gcflags &#39;-m -l&#39;</code>命令来查看逃逸分析结果，其中-m 打印逃逸分析信息，-l禁止内联优化。</p>
<h3 id="3-1-指针逃逸"><a href="#3-1-指针逃逸" class="headerlink" title="3.1 指针逃逸"></a>3.1 指针逃逸</h3><p>如果一个函数内部创建了一个对象(局部变量)，但是在函数返回时是返回该对象的指针，那么该变量的生命周期就变了，即使当前函数执行结束了，但是变量的指针还在，并不是随着函数结束就被回收的，那么这个局部变量就会被分配在堆上，这就产生了指针逃逸。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(argVal <span class="type">int</span>)</span></span> *<span class="type">int</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> fooVal1 <span class="type">int</span> = <span class="number">11</span></span><br><span class="line">	<span class="keyword">var</span> fooVal2 <span class="type">int</span> = <span class="number">12</span></span><br><span class="line">	<span class="keyword">var</span> fooVal3 <span class="type">int</span> = <span class="number">13</span></span><br><span class="line">	<span class="keyword">var</span> fooVal4 <span class="type">int</span> = <span class="number">14</span></span><br><span class="line">	<span class="keyword">var</span> fooVal5 <span class="type">int</span> = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(&amp;argVal, &amp;fooVal1, &amp;fooVal2, &amp;fooVal3, &amp;fooVal4, &amp;fooVal5)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;fooVal3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mainVal := foo(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(*mainVal, mainVal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">8</span>:<span class="number">6</span>: moved to heap: fooVal3</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">0xc000045f58</span> <span class="number">0xc000045f38</span> <span class="number">0xc000045f30</span> <span class="number">0xc00000e040</span> <span class="number">0xc000045f28</span> <span class="number">0xc000045f20</span></span><br><span class="line"><span class="number">13</span> <span class="number">0xc00000e040</span></span><br></pre></td></tr></table></figure>



<p>结果显示，逃逸分析结果显示fooVal3逃逸到了堆中，通过打印出来的变量地址我们可以发现，fooVal3的地址是0xc00000e040，与其他地址是不连续的。</p>
<h3 id="3-2-interface-动态类型逃逸"><a href="#3-2-interface-动态类型逃逸" class="headerlink" title="3.2 interface{} 动态类型逃逸"></a>3.2 interface{} 动态类型逃逸</h3><p>在golang中空接口interface{}可以是任意类型，因此编译器并不能确定其类型，所以也会被分配到堆上。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> valA <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	valA = <span class="number">666</span></span><br><span class="line">	fmt.Println(&amp;valA)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">6</span>:<span class="number">6</span>: moved to heap: valA</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">7</span>: <span class="number">666</span> escapes to heap</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">8</span>:<span class="number">13</span>: ... argument does not escape</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">0xc00004a230</span></span><br></pre></td></tr></table></figure>



<p>通过运行结果我们可以发现，interface{}变量varA逃逸到了堆中。</p>
<p>再来看下面这段程序：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	varB := <span class="number">666</span></span><br><span class="line">	fmt.Println(varB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>: ... argument does not escape</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>: varB escapes to heap</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">666</span></span><br></pre></td></tr></table></figure>

<p>可以看到，分析结果告诉我们变量varB逃逸到了堆上。但是，我们并没有外部引用啊，为什么也会有逃逸呢？为了看到更多细节，可以在语句中再添加一个-m参数：<code>go build -gcflags &#39;-m -m -l&#39;</code>。得到信息如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>: varB escapes to heap:</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>:   flow: &#123;storage <span class="keyword">for</span> ... argument&#125; = &amp;&#123;storage <span class="keyword">for</span> varB&#125;:</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>:     from varB (spill) at .\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span></span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>:     from ... argument (slice-literal-element) at .\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span></span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>:   flow: &#123;heap&#125; = &#123;storage <span class="keyword">for</span> ... argument&#125;:</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>:     from ... argument (spill) at .\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span></span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>:     from fmt.Println(... argument...) (call parameter) at .\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span></span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>: ... argument does not escape</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">13</span>: varB escapes to heap</span><br></pre></td></tr></table></figure>

<p>varB逃逸是因为它被传入了fmt.Println的参数中，这个方法参数自己发生了逃逸。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<p>因为fmt.Println的函数参数为interface类型，编译期不能确定其参数的具体类型，所以将其分配于堆上。</p>
<h3 id="3-3-栈空间不足"><a href="#3-3-栈空间不足" class="headerlink" title="3.3 栈空间不足"></a>3.3 栈空间不足</h3><p>如果程序中需要分配一个空间比较大的局部变量，栈空间已经不够分配了，那么也会被分配到堆上。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10000</span>, <span class="number">10000</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">		s[i] = i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	foo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">4</span>:<span class="number">11</span>: <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10000</span>, <span class="number">10000</span>) escapes to heap</span><br></pre></td></tr></table></figure>




<h3 id="3-4-变量大小不确定"><a href="#3-4-变量大小不确定" class="headerlink" title="3.4 变量大小不确定"></a>3.4 变量大小不确定</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	n := <span class="number">1</span></span><br><span class="line">	s := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">		s[i] = i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	foo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">5</span>:<span class="number">11</span>: <span class="built_in">make</span>([]<span class="type">int</span>, n) escapes to heap</span><br></pre></td></tr></table></figure>



<h3 id="3-5-闭包"><a href="#3-5-闭包" class="headerlink" title="3.5 闭包"></a>3.5 闭包</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>  &#123;</span><br><span class="line">	num := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		num++</span><br><span class="line">		<span class="keyword">return</span> num</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fn := Add()</span><br><span class="line">	fmt.Println(fn())</span><br><span class="line">	fmt.Println(fn())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">.\main.<span class="keyword">go</span>:<span class="number">6</span>:<span class="number">2</span>: moved to heap: num</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">7</span>:<span class="number">9</span>: <span class="function"><span class="keyword">func</span> <span class="title">literal</span> <span class="title">escapes</span> <span class="title">to</span> <span class="title">heap</span></span></span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">14</span>:<span class="number">13</span>: ... argument does not escape</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">14</span>:<span class="number">16</span>: fn() escapes to heap</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">15</span>:<span class="number">13</span>: ... argument does not escape</span><br><span class="line">.\main.<span class="keyword">go</span>:<span class="number">15</span>:<span class="number">16</span>: fn() escapes to heap</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>上述代码块中，Add() 返回的是一个闭包，并且该闭包访问了外部变量num，那么num将会被分配到堆上，因为num此时生命周期已经不会随着Add() 函数的结束而被回收，直到 fn 被销毁，num才会被回收。</p>
<h2 id="4-传值还是传指针"><a href="#4-传值还是传指针" class="headerlink" title="4.传值还是传指针"></a>4.传值还是传指针</h2><p>传值会拷贝整个对象，而传指针只会拷贝指针地址，指向的对象是同一个。传指针可以减少值的拷贝，但是会导致内存分配逃逸到堆中，增加垃圾回收(GC)的负担。在对象频繁创建和删除的场景下，传递指针导致的 GC 开销可能会严重影响性能。</p>
<p>一般情况下，对于需要修改原对象值，或占用内存比较大的结构体，选择传指针。对于只读的占用内存较小的结构体，直接传值能够获得更好的性能。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
</search>
